<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Datenverarbeitung in der Medienproduktion</title>
    <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/public/</link>
    <description>Recent content on Datenverarbeitung in der Medienproduktion</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de</language><atom:link href="https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/public/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Allgemeines</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/public/general/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/public/general/</guid>
      <description>Allgemeines yo.</description>
    </item>
    
    <item>
      <title>Übung 1 - Basics</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/public/chapter01/exercise01_b/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/public/chapter01/exercise01_b/</guid>
      <description>U1 </description>
    </item>
    
    <item>
      <title>Übung 1 - Basics</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/public/chapter02/exercise01_b/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/public/chapter02/exercise01_b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Übung 1 - Basics</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/public/chapter03/exercise01_b/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/public/chapter03/exercise01_b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Übung 1 - Basics</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/public/chapter04/exercise01_b/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/public/chapter04/exercise01_b/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Übung 1 - Intro</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/public/chapter01/exercise01_a/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/public/chapter01/exercise01_a/</guid>
      <description>Blender Setup und Scripting-Tools  Setup Blender für Scripting Blender Basics falls nötig Blender Tools:  Terminal Echtzeit Konsole Infopanel Texteditor Python Tooltips   bpy copypasta stuff aus Echtzeitkonsole  Suzanne hinzufügen und platzieren    Monkey Grid
import bpy GRID_SCALE = 5 GRID_SIZE = 5 for i in range(0, 5): for j in range(0, GRID_SIZE): bpy.ops.mesh.primitive_monkey_add(location=(GRID_SCALE * j ,GRID_SCALE * i, 0)) bpy.ops.transform.rotate(value=0.575267, orient_axis=&amp;#39;Z&amp;#39;, orient_type=&amp;#39;VIEW&amp;#39;, orient_matrix=((4.93038e-32, 1, 2.</description>
    </item>
    
    <item>
      <title>Übung 2 - Würfelturm</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/public/chapter02/exercise01_a/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/public/chapter02/exercise01_a/</guid>
      <description>Prozedurale Würfeltürmchen bauen Türmchen:
 Genau gestapelte Würfel nach oben schmaler werden Würfel mit random Scale, Z-Rotation und Location-Offset  Beispielcode Würfeltürmchen
import bpy import random from datetime import datetime import mathutils MAX_STACKS = 10 MIN_STACKS = 2 MAX_SCALE = 2.5 MIN_SCALE = 0.5 # clear scene - später entfernen bpy.ops.object.select_all(action=&amp;#39;SELECT&amp;#39;) bpy.ops.object.delete() random.seed(datetime.now()) bpy.ops.mesh.primitive_cube_add() C = bpy.context src_obj = C.active_object src_obj.rotation_euler.z = random.random() * 360 rand_scale = random.uniform(MIN_SCALE, MAX_SCALE) src_obj.scale = mathutils.</description>
    </item>
    
    <item>
      <title>Übung 3 - Würfeldimension</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/public/chapter03/exercise01_a/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/public/chapter03/exercise01_a/</guid>
      <description>Addon mit UI erstellen um Würfeldimension zu generieren:
 Set an Türmchenassets generieren Mit Voronoi Diagram (Kollisionsfrei - oder doch Partikelsystem wenn zu kompliziert) auf Fläche verteilen Würfel bis zum Horizont - hübsch rendern (bei bedarf vorgegebene Szene)  </description>
    </item>
    
    <item>
      <title>Übung 4 - Meshgenerierung</title>
      <link>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/public/chapter04/exercise01_a/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://simonstorlschulke.github.io/Datenverarbeitung-in-der-Medienproduktion/public/chapter04/exercise01_a/</guid>
      <description>Basics der Meshgenerierung und -manipulation
 BMesh Vertices bewegen Anwendung? Funktion plotten, Terrain / Fraktal generieren?  Meshmanipulation Codebeispiel  BMesh Einführung  # This example assumes we have a mesh object selected import bpy import bmesh # Get the active mesh me = bpy.context.object.data # Get a BMesh representation bm = bmesh.new() # create an empty BMesh bm.from_mesh(me) # fill it in from a Mesh # Modify the BMesh, can do anything here.</description>
    </item>
    
  </channel>
</rss>
